Question: https://leetcode.com/problems/longest-palindromic-substring/
```
My solution:  Time Limit Exceeded(O(n^3) since used substring() is O(n))
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0){
            return "";
        }
        int max = 0;
        String result = "";
        for (int i = 0; i < s.length(); i++){
            int j = s.length();
            if (j - i <= max){
                break;
            }
            while (j > max + i &&!isPalindrome(s.substring(i, j))){
                j--;
            }
            if(j - i > max){
                result = s.substring(i, j);   
                max = j - i;
            }
        }
        return result;
    }
    
    private boolean isPalindrome(String s){
        for (int i = 0; i < s.length()/2; i++){
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)){
                return false;
            }
        }
        return true;
    }
  ////////////////////////////////////////////////////////////
  Renjia's solution:  从中间开始找，不用substring()这个O(N)的method，降低时间复杂度！
    private int maxLength = 1;
    private int maxIndex = 0;
    public String longestPalindrome(String str) { //O(N^2), space O(1)
        int length = str.length();
        for (int i=0; i<length; i++) {
            // find longest odd palindrome with center i
            findPalindrome(str, length, i, 0);
            // find longest even palindrome with center i
            findPalindrome(str, length, i, 1);
        }
        return str.substring(maxIndex, maxIndex+maxLength);
    }

    private void findPalindrome(String str, int length, int i, int shift) {
      int left = i;
      int right= i+shift;
      while (left >= 0 && right < length && str.charAt(left) == str.charAt(right)) {
        if ((right - left + 1) > maxLength) {
          maxLength = right - left + 1;
          maxIndex = left;
        }
        left--;
        right++;
    }
   }
```
